import React, { useState } from 'react';
import { IncomeEntry, ExpenseEntry, AppSettings, Company } from '../types';
import { formatCurrency, calculateTotalIncome, calculateTotalExpenses, calculateProfit, filterEntriesByMonth, getMonthName } from '../utils/calculations';
import { Download, FileText, Calendar, TrendingUp, TrendingDown, DollarSign, BarChart3 } from 'lucide-react';
import jsPDF from 'jspdf';
import { useCompanyManager } from '../hooks/useCompanyManager';

interface ReportsProps {
  income: IncomeEntry[];
  expenses: ExpenseEntry[];
  settings: AppSettings;
}

const Reports: React.FC<ReportsProps> = ({ income, expenses, settings }) => {
  const { activeCompany } = useCompanyManager();
  
  // Get available years from actual data
  const getAvailableYears = () => {
    const allDates = [
      ...income.map(entry => entry.date),
      ...expenses.map(entry => entry.date)
    ];
    
    const years = allDates.map(date => new Date(date).getFullYear());
    const uniqueYears = [...new Set(years)].sort((a, b) => b - a);
    
    return uniqueYears.length > 0 ? uniqueYears : [new Date().getFullYear()];
  };

  // Get available months for a specific year from actual data
  const getAvailableMonths = (year: number) => {
    const allDates = [
      ...income.filter(entry => new Date(entry.date).getFullYear() === year).map(entry => entry.date),
      ...expenses.filter(entry => new Date(entry.date).getFullYear() === year).map(entry => entry.date)
    ];
    
    const months = allDates.map(date => new Date(date).getMonth());
    const uniqueMonths = [...new Set(months)].sort((a, b) => a - b);
    
    return uniqueMonths.length > 0 ? uniqueMonths : [new Date().getMonth()];
  };

  const availableYears = getAvailableYears();
  const [selectedYear, setSelectedYear] = useState(availableYears[0] || new Date().getFullYear());
  
  const availableMonths = getAvailableMonths(selectedYear);
  const [selectedMonth, setSelectedMonth] = useState(availableMonths[0] || new Date().getMonth());
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeReport, setActiveReport] = useState<'monthly' | 'annual' | 'pl'>('monthly');
  const [reportType, setReportType] = useState<'simple' | 'detailed'>('simple');

  // Helper function to add header with company info and page numbers
  const addReportHeader = (pdf: jsPDF, title: string, subtitle: string, pageNumber: number) => {
    const pageWidth = pdf.internal.pageSize.getWidth();
    
    // Company name at top left
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Company: ${activeCompany?.name || 'Unknown Company'}`, 20, 15);
    
    // Page number at top right
    pdf.text(`Page ${pageNumber}`, pageWidth - 20, 15, { align: 'right' });
    
    // Main title
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    pdf.text(title, pageWidth / 2, 30, { align: 'center' });
    
    // Subtitle
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'normal');
    pdf.text(subtitle, pageWidth / 2, 40, { align: 'center' });
    
    return 50; // Return starting Y position for content
  };

  // Helper function to add footer with generation info
  const addReportFooter = (pdf: jsPDF, pageNumber: number) => {
    const pageHeight = pdf.internal.pageSize.getHeight();
    const pageWidth = pdf.internal.pageSize.getWidth();
    
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Generated by AuditThis! on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    pdf.text(`${activeCompany?.name || 'Unknown Company'}`, 20, pageHeight - 10);
    pdf.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10, { align: 'right' });
  };

  // Update available months when year changes
  React.useEffect(() => {
    const newAvailableMonths = getAvailableMonths(selectedYear);
    if (!newAvailableMonths.includes(selectedMonth)) {
      setSelectedMonth(newAvailableMonths[0] || 0);
    }
  }, [selectedYear]);

  // Annual data - filter by selected year
  const yearlyIncome = income.filter(entry => new Date(entry.date).getFullYear() === selectedYear);
  const yearlyExpenses = expenses.filter(entry => new Date(entry.date).getFullYear() === selectedYear);
  const totalIncome = calculateTotalIncome(yearlyIncome);
  const totalExpenses = calculateTotalExpenses(yearlyExpenses);
  const totalProfit = calculateProfit(totalIncome, totalExpenses);

  // Monthly data
  const monthlyIncome = filterEntriesByMonth(income, selectedYear, selectedMonth);
  const monthlyExpenses = filterEntriesByMonth(expenses, selectedYear, selectedMonth);
  const monthlyTotalIncome = calculateTotalIncome(monthlyIncome);
  const monthlyTotalExpenses = calculateTotalExpenses(monthlyExpenses);
  const monthlyTotalProfit = calculateProfit(monthlyTotalIncome, monthlyTotalExpenses);

  const generateMonthlyReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let pageNumber = 1;
      
      // Add header and get starting Y position
      let yPos = addReportHeader(
        pdf, 
        `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'}`,
        `${getMonthName(selectedMonth)} ${selectedYear}`,
        pageNumber
      );
      
      // Summary section
      yPos += 10;
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Financial Summary', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Summary table
      const summaryData = [
        ['Total Income', formatCurrency(monthlyTotalIncome, settings.currency)],
        ['Total Expenses', formatCurrency(monthlyTotalExpenses, settings.currency)],
        ['Net Profit', formatCurrency(monthlyTotalProfit, settings.currency)]
      ];
      
      summaryData.forEach(([label, value]) => {
        pdf.text(label + ':', 20, yPos);
        pdf.text(value, 80, yPos);
        yPos += 8;
      });
      
      // Income breakdown
      yPos += 10;
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Income Breakdown', 20, yPos);
      
      yPos += 10;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      
      // Income table headers
      pdf.text('Date', 20, yPos);
      pdf.text('Category', 50, yPos);
      pdf.text('Total Income', 100, yPos);
      pdf.text('Sales Tax', 130, yPos);
      pdf.text('Net Income', 160, yPos);
      
      yPos += 5;
      pdf.line(20, yPos, 190, yPos);
      yPos += 5;
      
      monthlyIncome.forEach((entry) => {
        if (yPos > pageHeight - 30) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `${getMonthName(selectedMonth)} ${selectedYear}`,
            pageNumber
          );
        }
        
        pdf.text(entry.date, 20, yPos);
        pdf.text(entry.category, 50, yPos);
        pdf.text(formatCurrency(entry.totalIncome, settings.currency), 100, yPos);
        pdf.text(formatCurrency(entry.salesTax, settings.currency), 130, yPos);
        pdf.text(formatCurrency(entry.netIncome, settings.currency), 160, yPos);
        yPos += 6;
      });
      
      // Expense breakdown
      yPos += 10;
      if (yPos > pageHeight - 50) {
        pdf.addPage();
        pageNumber++;
        yPos = addReportHeader(
          pdf, 
          `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
          `${getMonthName(selectedMonth)} ${selectedYear}`,
          pageNumber
        );
      }
      
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Expense Breakdown', 20, yPos);
      
      yPos += 10;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      
      // Expense table headers
      if (reportType === 'detailed') {
        pdf.text('Date', 20, yPos);
        pdf.text('Category', 45, yPos);
        pdf.text('Vendor', 75, yPos);
        pdf.text('Total Expense', 105, yPos);
        pdf.text('Tax', 135, yPos);
        pdf.text('Net Expense', 165, yPos);
      } else {
        pdf.text('Date', 20, yPos);
        pdf.text('Category', 60, yPos);
        pdf.text('Total Expense', 110, yPos);
        pdf.text('Tax', 140, yPos);
        pdf.text('Net Expense', 170, yPos);
      }
      
      yPos += 5;
      pdf.line(20, yPos, 190, yPos);
      yPos += 5;
      
      monthlyExpenses.forEach((entry) => {
        if (yPos > pageHeight - 30) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `${getMonthName(selectedMonth)} ${selectedYear}`,
            pageNumber
          );
        }
        
        if (reportType === 'detailed') {
          pdf.text(entry.date, 20, yPos);
          pdf.text(entry.category.substring(0, 12), 45, yPos);
          pdf.text((entry.vendor || '-').substring(0, 12), 75, yPos);
          pdf.text(formatCurrency(entry.totalExpense, settings.currency), 105, yPos);
          pdf.text(formatCurrency(entry.tax, settings.currency), 135, yPos);
          pdf.text(formatCurrency(entry.netExpense, settings.currency), 165, yPos);
        } else {
          pdf.text(entry.date, 20, yPos);
          pdf.text(entry.category, 60, yPos);
          pdf.text(formatCurrency(entry.totalExpense, settings.currency), 110, yPos);
          pdf.text(formatCurrency(entry.tax, settings.currency), 140, yPos);
          pdf.text(formatCurrency(entry.netExpense, settings.currency), 170, yPos);
        }
        yPos += 6;
      });
      
      // Add vendor summary for detailed reports
      if (reportType === 'detailed') {
        yPos += 15;
        if (yPos > pageHeight - 50) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `${getMonthName(selectedMonth)} ${selectedYear}`,
            pageNumber
          );
        }
        
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Vendor Summary', 20, yPos);
        
        yPos += 10;
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        
        const vendorSummary = monthlyExpenses.reduce((acc, expense) => {
          if (expense.vendor && expense.vendor.trim() !== '') {
            const vendor = expense.vendor;
            if (!acc[vendor]) {
              acc[vendor] = { total: 0, count: 0 };
            }
            acc[vendor].total += expense.totalExpense;
            acc[vendor].count += 1;
          }
          return acc;
        }, {} as Record<string, { total: number; count: number }>);
        
        Object.entries(vendorSummary)
          .sort(([,a], [,b]) => b.total - a.total)
          .forEach(([vendor, data]) => {
            if (yPos > pageHeight - 30) {
              pdf.addPage();
              pageNumber++;
              yPos = addReportHeader(
                pdf, 
                `Monthly Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
                `${getMonthName(selectedMonth)} ${selectedYear}`,
                pageNumber
              );
            }
            
            pdf.text(`${vendor} (${data.count} transactions):`, 20, yPos);
            pdf.text(formatCurrency(data.total, settings.currency), 120, yPos);
            yPos += 6;
          });
      }
      
      // Add footer to all pages
      const totalPages = pageNumber;
      for (let i = 1; i <= totalPages; i++) {
        if (i > 1) {
          pdf.setPage(i);
        }
        addReportFooter(pdf, i);
      }
      
      pdf.save(`Monthly-Report-${getMonthName(selectedMonth)}-${selectedYear}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report');
    }
    
    setIsGenerating(false);
  };

  const generateAnnualReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let pageNumber = 1;
      
      // Add header and get starting Y position
      let yPos = addReportHeader(
        pdf, 
        `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'}`,
        `Year ${selectedYear}`,
        pageNumber
      );
      
      // Summary section
      yPos += 10;
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Annual Summary', 20, yPos);
      
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Summary table
      const summaryData = [
        ['Total Annual Income', formatCurrency(totalIncome, settings.currency)],
        ['Total Annual Expenses', formatCurrency(totalExpenses, settings.currency)],
        ['Net Annual Profit', formatCurrency(totalProfit, settings.currency)],
        ['Average Monthly Income', formatCurrency(totalIncome / 12, settings.currency)],
        ['Average Monthly Expenses', formatCurrency(totalExpenses / 12, settings.currency)],
        ['Average Monthly Profit', formatCurrency(totalProfit / 12, settings.currency)]
      ];
      
      summaryData.forEach(([label, value]) => {
        pdf.text(label + ':', 20, yPos);
        pdf.text(value, 100, yPos);
        yPos += 8;
      });
      
      // Monthly breakdown
      yPos += 15;
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Monthly Breakdown', 20, yPos);
      
      yPos += 10;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      
      // Monthly table headers
      pdf.text('Month', 20, yPos);
      pdf.text('Income', 60, yPos);
      pdf.text('Expenses', 100, yPos);
      pdf.text('Profit', 140, yPos);
      
      yPos += 5;
      pdf.line(20, yPos, 170, yPos);
      yPos += 5;
      
      Array.from({ length: 12 }, (_, monthIndex) => {
        const monthlyIncome = filterEntriesByMonth(yearlyIncome, selectedYear, monthIndex);
        const monthlyExpenses = filterEntriesByMonth(yearlyExpenses, selectedYear, monthIndex);
        const monthIncome = calculateTotalIncome(monthlyIncome);
        const monthExpenses = calculateTotalExpenses(monthlyExpenses);
        const monthProfit = calculateProfit(monthIncome, monthExpenses);
        
        if (yPos > pageHeight - 30) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `Year ${selectedYear}`,
            pageNumber
          );
        }
        
        pdf.text(`${getMonthName(monthIndex)} ${selectedYear}`, 20, yPos);
        pdf.text(formatCurrency(monthIncome, settings.currency), 60, yPos);
        pdf.text(formatCurrency(monthExpenses, settings.currency), 100, yPos);
        pdf.text(formatCurrency(monthProfit, settings.currency), 140, yPos);
        yPos += 6;
      });
      
      // Category breakdown
      yPos += 15;
      if (yPos > pageHeight - 50) {
        pdf.addPage();
        pageNumber++;
        yPos = addReportHeader(
          pdf, 
          `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
          `Year ${selectedYear}`,
          pageNumber
        );
      }
      
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Expense Categories', 20, yPos);
      
      yPos += 10;
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      
      const expensesByCategory = yearlyExpenses.reduce((acc, expense) => {
        acc[expense.category] = (acc[expense.category] || 0) + expense.netExpense;
        return acc;
      }, {} as Record<string, number>);
      
      Object.entries(expensesByCategory).forEach(([category, amount]) => {
        if (yPos > pageHeight - 30) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `Year ${selectedYear}`,
            pageNumber
          );
        }
        
        pdf.text(category + ':', 20, yPos);
        pdf.text(formatCurrency(amount, settings.currency), 100, yPos);
        yPos += 6;
      });
      
      // Add detailed vendor analysis for detailed reports
      if (reportType === 'detailed') {
        yPos += 15;
        if (yPos > pageHeight - 50) {
          pdf.addPage();
          pageNumber++;
          yPos = addReportHeader(
            pdf, 
            `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
            `Year ${selectedYear}`,
            pageNumber
          );
        }
        
        pdf.setFontSize(14);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Annual Vendor Analysis', 20, yPos);
        
        yPos += 10;
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        
        // Vendor table headers
        pdf.text('Vendor', 20, yPos);
        pdf.text('Transactions', 80, yPos);
        pdf.text('Total Amount', 130, yPos);
        pdf.text('Avg per Transaction', 170, yPos);
        
        yPos += 5;
        pdf.line(20, yPos, 190, yPos);
        yPos += 5;
        
        const vendorAnalysis = yearlyExpenses.reduce((acc, expense) => {
          if (expense.vendor && expense.vendor.trim() !== '') {
            const vendor = expense.vendor;
            if (!acc[vendor]) {
              acc[vendor] = { total: 0, count: 0 };
            }
            acc[vendor].total += expense.totalExpense;
            acc[vendor].count += 1;
          }
          return acc;
        }, {} as Record<string, { total: number; count: number }>);
        
        Object.entries(vendorAnalysis)
          .sort(([,a], [,b]) => b.total - a.total)
          .forEach(([vendor, data]) => {
            if (yPos > pageHeight - 30) {
              pdf.addPage();
              pageNumber++;
              yPos = addReportHeader(
                pdf, 
                `Annual Financial Report ${reportType === 'detailed' ? '(Detailed)' : '(Simple)'} (Continued)`,
                `Year ${selectedYear}`,
                pageNumber
              );
            }
            
            pdf.text(vendor.substring(0, 20), 20, yPos);
            pdf.text(data.count.toString(), 80, yPos);
            pdf.text(formatCurrency(data.total, settings.currency), 130, yPos);
            pdf.text(formatCurrency(data.total / data.count, settings.currency), 170, yPos);
            yPos += 6;
          });
      }
      
      // Add footer to all pages
      const totalPages = pageNumber;
      for (let i = 1; i <= totalPages; i++) {
        if (i > 1) {
          pdf.setPage(i);
        }
        addReportFooter(pdf, i);
      }
      
      pdf.save(`Annual-Report-${selectedYear}.pdf`);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF report');
    }
    
    setIsGenerating(false);
  };

  const generateProfitLossStatement = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let pageNumber = 1;
      
      // Add header and get starting Y position
      let yPos = addReportHeader(
        pdf, 
        'Profit & Loss Statement',
        `Year ${selectedYear}`,
        pageNumber
      );
      
      yPos += 10;
      
      // Revenue Section
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('REVENUE', 20, yPos);
      yPos += 10;
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Income breakdown by category
      const incomeByCategory = yearlyIncome.reduce((acc, entry) => {
        acc[entry.category] = (acc[entry.category] || 0) + entry.totalIncome;
        return acc;
      }, {} as Record<string, number>);
      
      Object.entries(incomeByCategory).forEach(([category, amount]) => {
        pdf.text(`  ${category}`, 25, yPos);
        pdf.text(formatCurrency(amount, settings.currency), 150, yPos, { align: 'right' });
        yPos += 6;
      });
      
      yPos += 5;
      pdf.line(25, yPos, 150, yPos);
      yPos += 8;
      
      pdf.setFont('helvetica', 'bold');
      pdf.text('Total Revenue', 25, yPos);
      pdf.text(formatCurrency(totalIncome, settings.currency), 150, yPos, { align: 'right' });
      yPos += 15;
      
      // Expenses Section
      pdf.setFontSize(16);
      pdf.text('EXPENSES', 20, yPos);
      yPos += 10;
      
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      // Expense breakdown by category
      const expensesByCategory = yearlyExpenses.reduce((acc, expense) => {
        acc[expense.category] = (acc[expense.category] || 0) + expense.totalExpense;
        return acc;
      }, {} as Record<string, number>);
      
      Object.entries(expensesByCategory).forEach(([category, amount]) => {
        pdf.text(`  ${category}`, 25, yPos);
        pdf.text(formatCurrency(amount, settings.currency), 150, yPos, { align: 'right' });
        yPos += 6;
      });
      
      yPos += 5;
      pdf.line(25, yPos, 150, yPos);
      yPos += 8;
      
      pdf.setFont('helvetica', 'bold');
      pdf.text('Total Expenses', 25, yPos);
      pdf.text(formatCurrency(totalExpenses, settings.currency), 150, yPos, { align: 'right' });
      yPos += 15;
      
      // Net Income Section
      pdf.setFontSize(16);
      pdf.text('NET INCOME', 20, yPos);
      yPos += 10;
      
      pdf.setFontSize(12);
      pdf.text('Gross Profit', 25, yPos);
      pdf.text(formatCurrency(totalIncome, settings.currency), 150, yPos, { align: 'right' });
      yPos += 6;
      
      pdf.text('Less: Total Expenses', 25, yPos);
      pdf.text(`(${formatCurrency(totalExpenses, settings.currency)})`, 150, yPos, { align: 'right' });
      yPos += 8;
      
      pdf.line(25, yPos, 150, yPos);
      pdf.line(25, yPos + 2, 150, yPos + 2);
      yPos += 10;
      
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(14);
      pdf.text('Net Income', 25, yPos);
      pdf.text(formatCurrency(totalProfit, settings.currency), 150, yPos, { align: 'right' });
      
      // Add profit margin
      yPos += 15;
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      const profitMargin = totalIncome > 0 ? ((totalProfit / totalIncome) * 100).toFixed(1) : '0.0';
      pdf.text(`Profit Margin: ${profitMargin}%`, 25, yPos);
      
      // Add footer
      addReportFooter(pdf, pageNumber);
      
      pdf.save(`Profit-Loss-Statement-${selectedYear}.pdf`);
    } catch (error) {
      console.error('Error generating P&L statement:', error);
      alert('Error generating Profit & Loss statement');
    }
    
    setIsGenerating(false);
  };

  return (
    <div className="h-full bg-gray-50 dark:bg-gray-900 transition-colors duration-200 overflow-hidden">
      <div className="max-w-7xl mx-auto px-4 py-8 h-full scrollable-content">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">Reports</h1>
          <p className="text-gray-600 dark:text-gray-400">Generate professional financial reports for your accountant</p>
        </div>

        {/* Report Type Selector */}
        <div className="flex justify-center mb-8">
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-2 transition-colors duration-200">
            <div className="flex space-x-2">
              <button
                onClick={() => setActiveReport('monthly')}
                className={`px-4 py-2 rounded-lg transition-colors duration-200 ${
                  activeReport === 'monthly'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                Monthly Report
              </button>
              <button
                onClick={() => setActiveReport('annual')}
                className={`px-4 py-2 rounded-lg transition-colors duration-200 ${
                  activeReport === 'annual'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                Annual Report
              </button>
              <button
                onClick={() => setActiveReport('pl')}
                className={`px-4 py-2 rounded-lg transition-colors duration-200 ${
                  activeReport === 'pl'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                P&L Statement
              </button>
            </div>
          </div>
        </div>

        {activeReport === 'pl' ? (
          /* Profit & Loss Statement */
          <div className="max-w-4xl mx-auto">
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8 transition-colors duration-200">
              <div className="flex items-center space-x-3 mb-6">
                <div className="p-3 bg-green-100 rounded-lg">
                  <BarChart3 className="w-6 h-6 text-green-600" />
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Profit & Loss Statement</h2>
                  <p className="text-gray-600 dark:text-gray-400">Comprehensive financial performance overview</p>
                </div>
              </div>

              <div className="space-y-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Year</label>
                  <select
                    value={selectedYear}
                    onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                    className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                  >
                    {availableYears.map(year => (
                      <option key={year} value={year}>
                        {year}
                      </option>
                    ))}
                  </select>
                </div>

                {/* P&L Statement Display */}
                <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-6 transition-colors duration-200">
                  <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-6 text-center">
                    Profit & Loss Statement - {selectedYear}
                  </h3>
                  
                  {/* Revenue Section */}
                  <div className="mb-6">
                    <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-3 border-b border-gray-300 dark:border-gray-600 pb-2">
                      REVENUE
                    </h4>
                    <div className="space-y-2">
                      {settings.incomeStreams.map(stream => {
                        const streamIncome = yearlyIncome
                          .filter(entry => entry.category === stream.name)
                          .reduce((sum, entry) => sum + entry.totalIncome, 0);
                        
                        return streamIncome > 0 ? (
                          <div key={stream.id} className="flex justify-between items-center pl-4">
                            <span className="text-gray-700 dark:text-gray-300">{stream.name}</span>
                            <span className="font-medium text-gray-900 dark:text-white">
                              {formatCurrency(streamIncome, settings.currency)}
                            </span>
                          </div>
                        ) : null;
                      })}
                      <div className="border-t border-gray-300 dark:border-gray-600 pt-2 mt-3">
                        <div className="flex justify-between items-center font-semibold">
                          <span className="text-gray-900 dark:text-white">Total Revenue</span>
                          <span className="text-green-600 dark:text-green-400">
                            {formatCurrency(totalIncome, settings.currency)}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Expenses Section */}
                  <div className="mb-6">
                    <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-3 border-b border-gray-300 dark:border-gray-600 pb-2">
                      EXPENSES
                    </h4>
                    <div className="space-y-2">
                      {settings.expenseCategories.map(category => {
                        const categoryExpenses = yearlyExpenses
                          .filter(expense => expense.category === category.name)
                          .reduce((sum, expense) => sum + expense.totalExpense, 0);
                        
                        return categoryExpenses > 0 ? (
                          <div key={category.id} className="flex justify-between items-center pl-4">
                            <span className="text-gray-700 dark:text-gray-300">{category.name}</span>
                            <span className="font-medium text-gray-900 dark:text-white">
                              {formatCurrency(categoryExpenses, settings.currency)}
                            </span>
                          </div>
                        ) : null;
                      })}
                      <div className="border-t border-gray-300 dark:border-gray-600 pt-2 mt-3">
                        <div className="flex justify-between items-center font-semibold">
                          <span className="text-gray-900 dark:text-white">Total Expenses</span>
                          <span className="text-red-600 dark:text-red-400">
                            {formatCurrency(totalExpenses, settings.currency)}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Net Income Section */}
                  <div className="border-t-2 border-gray-400 dark:border-gray-500 pt-4">
                    <h4 className="text-md font-semibold text-gray-900 dark:text-white mb-3">
                      NET INCOME
                    </h4>
                    <div className="space-y-2">
                      <div className="flex justify-between items-center pl-4">
                        <span className="text-gray-700 dark:text-gray-300">Gross Revenue</span>
                        <span className="font-medium text-gray-900 dark:text-white">
                          {formatCurrency(totalIncome, settings.currency)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center pl-4">
                        <span className="text-gray-700 dark:text-gray-300">Less: Total Expenses</span>
                        <span className="font-medium text-gray-900 dark:text-white">
                          ({formatCurrency(totalExpenses, settings.currency)})
                        </span>
                      </div>
                      <div className="border-t-2 border-gray-400 dark:border-gray-500 pt-2 mt-3">
                        <div className="flex justify-between items-center font-bold text-lg">
                          <span className="text-gray-900 dark:text-white">Net Income</span>
                          <span className={totalProfit >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}>
                            {formatCurrency(totalProfit, settings.currency)}
                          </span>
                        </div>
                        <div className="flex justify-between items-center mt-2 text-sm">
                          <span className="text-gray-600 dark:text-gray-400">Profit Margin</span>
                          <span className="text-gray-600 dark:text-gray-400">
                            {totalIncome > 0 ? `${((totalProfit / totalIncome) * 100).toFixed(1)}%` : '0.0%'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-center">
                <button
                  onClick={generateProfitLossStatement}
                  disabled={isGenerating}
                  className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Download className="w-4 h-4" />
                  <span>{isGenerating ? 'Generating...' : 'Download P&L Statement'}</span>
                </button>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex justify-center">
            <div className="w-full max-w-md">
              {/* Monthly Report */}
              {activeReport === 'monthly' && (
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8 transition-colors duration-200">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="p-3 bg-blue-100 rounded-lg">
                      <Calendar className="w-6 h-6 text-blue-600" />
                    </div>
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Monthly Report</h2>
                      <p className="text-gray-600 dark:text-gray-400">Detailed monthly financial breakdown</p>
                    </div>
                  </div>

                  <div className="space-y-4 mb-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Report Type</label>
                      <select
                        value={reportType}
                        onChange={(e) => setReportType(e.target.value as 'simple' | 'detailed')}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                      >
                        <option value="simple">Simple Report</option>
                        <option value="detailed">Detailed Report (with vendors)</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Year</label>
                      <select
                        value={selectedYear}
                        onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                      >
                        {availableYears.map(year => (
                          <option key={year} value={year}>
                            {year}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Month</label>
                      <select
                        value={selectedMonth}
                        onChange={(e) => setSelectedMonth(parseInt(e.target.value))}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                      >
                        {availableMonths.map(monthIndex => (
                          <option key={monthIndex} value={monthIndex}>
                            {getMonthName(monthIndex)} {selectedYear}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <div className="text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                        <TrendingUp className="w-5 h-5 text-green-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Income</p>
                        <p className="font-semibold text-green-600 dark:text-green-400 text-center">{formatCurrency(monthlyTotalIncome, settings.currency)}</p>
                      </div>
                      <div className="text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
                        <TrendingDown className="w-5 h-5 text-red-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Expenses</p>
                        <p className="font-semibold text-red-600 dark:text-red-400 text-center">{formatCurrency(monthlyTotalExpenses, settings.currency)}</p>
                      </div>
                      <div className="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                        <DollarSign className="w-5 h-5 text-blue-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Profit</p>
                        <p className={`font-semibold text-center ${monthlyTotalProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {formatCurrency(monthlyTotalProfit, settings.currency)}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-center">
                    <button
                      onClick={generateMonthlyReport}
                      disabled={isGenerating}
                      className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Download className="w-4 h-4" />
                      <span>{isGenerating ? 'Generating...' : `Generate ${reportType === 'detailed' ? 'Detailed' : 'Simple'} Monthly Report`}</span>
                    </button>
                  </div>
                </div>
              )}

              {/* Annual Report */}
              {activeReport === 'annual' && (
                <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8 transition-colors duration-200">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="p-3 bg-purple-100 rounded-lg">
                      <FileText className="w-6 h-6 text-purple-600" />
                    </div>
                    <div>
                      <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Annual Report</h2>
                      <p className="text-gray-600 dark:text-gray-400">Comprehensive yearly financial summary</p>
                    </div>
                  </div>

                  <div className="space-y-4 mb-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Report Type</label>
                      <select
                        value={reportType}
                        onChange={(e) => setReportType(e.target.value as 'simple' | 'detailed')}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                      >
                        <option value="simple">Simple Report</option>
                        <option value="detailed">Detailed Report (with vendors)</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Year</label>
                      <select
                        value={selectedYear}
                        onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                        className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white transition-colors duration-200"
                      >
                        {availableYears.map(year => (
                          <option key={year} value={year}>
                            {year}
                          </option>
                        ))}
                      </select>
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <div className="text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg">
                        <TrendingUp className="w-5 h-5 text-green-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Total Income</p>
                        <p className="font-semibold text-green-600 dark:text-green-400 text-center">{formatCurrency(totalIncome, settings.currency)}</p>
                      </div>
                      <div className="text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
                        <TrendingDown className="w-5 h-5 text-red-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Total Expenses</p>
                        <p className="font-semibold text-red-600 dark:text-red-400 text-center">{formatCurrency(totalExpenses, settings.currency)}</p>
                      </div>
                      <div className="text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                        <DollarSign className="w-5 h-5 text-blue-600 mx-auto mb-2" />
                        <p className="text-sm text-gray-600 dark:text-gray-400 text-center">Net Profit</p>
                        <p className={`font-semibold text-center ${totalProfit >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {formatCurrency(totalProfit, settings.currency)}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-center">
                    <button
                      onClick={generateAnnualReport}
                      disabled={isGenerating}
                      className="w-full flex items-center justify-center space-x-2 px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      <Download className="w-4 h-4" />
                      <span>{isGenerating ? 'Generating...' : `Generate ${reportType === 'detailed' ? 'Detailed' : 'Simple'} Annual Report`}</span>
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Report Features */}
        <div className="mt-8 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 transition-colors duration-200">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 text-center">Report Features</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="flex items-center justify-center space-x-3">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Professional formatting</span>
            </div>
            <div className="flex items-center justify-center space-x-3">
              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Detailed breakdowns</span>
            </div>
            <div className="flex items-center justify-center space-x-3">
              <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">Accountant-ready format</span>
            </div>
            <div className="flex items-center justify-center space-x-3">
              <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
              <span className="text-sm text-gray-600 dark:text-gray-400">P&L statements</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Reports;